[
  {
    "comment": "/**\n * Blur an image\n * @param {Canvas} canvas The Canvas instance\n * @param {number} amount The edge and the center\n * @returns {Canvas}\n */",
    "meta": {
      "range": [
        4415,
        4506
      ],
      "filename": "filters.js",
      "lineno": 148,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002777",
        "name": "exports.blur",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "canvas",
          "amount"
        ]
      }
    },
    "description": "Blur an image",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The edge and the center",
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "name": "blur",
    "longname": "blur",
    "kind": "function",
    "scope": "global",
    "$longname": "blur"
  },
  {
    "comment": "/**\n * Brighten an image\n * @param {Canvas} canvas The Canvas instance\n * @param {number} brightness The brightness to apply in a range of 0 to 100\n * @returns {Canvas}\n */",
    "meta": {
      "range": [
        3361,
        3548
      ],
      "filename": "filters.js",
      "lineno": 111,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002678",
        "name": "exports.brightness",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "canvas",
          "brightness"
        ]
      }
    },
    "description": "Brighten an image",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The brightness to apply in a range of 0 to 100",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "name": "brightness",
    "longname": "brightness",
    "kind": "function",
    "scope": "global",
    "$longname": "brightness"
  },
  {
    "comment": "/**\n     * Initialize canvas-constructor\n     * @param {number} width The canvas' width in pixels.\n     * @param {number} height The canvas' height in pixels.\n     * @param {('pdf'|'svg')} [type] The canvas type.\n     */",
    "meta": {
      "range": [
        590,
        1462
      ],
      "filename": "canvas.js",
      "lineno": 22,
      "columnno": 4,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100000032",
        "name": "CanvasConstructor",
        "type": "MethodDefinition",
        "paramnames": [
          "width",
          "height",
          "type"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Initialize canvas-constructor",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The canvas' width in pixels.",
        "name": "width"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The canvas' height in pixels.",
        "name": "height"
      },
      {
        "type": {
          "names": [
            "'pdf'",
            "'svg'"
          ]
        },
        "optional": true,
        "description": "The canvas type.",
        "name": "type"
      }
    ],
    "name": "CanvasConstructor",
    "longname": "CanvasConstructor",
    "kind": "class",
    "scope": "global",
    "$longname": "CanvasConstructor",
    "$members": [
      {
        "comment": "/**\n     * Register a new font (Canvas 2.x).\n     * @param {string} path   The path for the font.\n     * @param {string} family The font's family name.\n     * @returns {CanvasConstructor}\n     */",
        "meta": {
          "range": [
            50927,
            51208
          ],
          "filename": "canvas.js",
          "lineno": 1237,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100002134",
            "name": "CanvasConstructor.registerFont",
            "type": "MethodDefinition",
            "paramnames": [
              "path",
              "family"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Register a new font (Canvas 2.x).",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path for the font.",
            "name": "path"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The font's family name.",
            "name": "family"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "name": "registerFont",
        "longname": "CanvasConstructor.registerFont",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "static",
        "$longname": "CanvasConstructor.registerFont"
      },
      {
        "comment": "/**\n     * Add a beveled image.\n     * @param {Buffer} buffer The image's buffer.\n     * @param {number} x      The position x to start drawing the element.\n     * @param {number} y      The position y to start drawing the element.\n     * @param {number} width  The width of the element.\n     * @param {number} height The heigth of the element.\n     * @param {number} radius The radius for the new image.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            22400,
            22549
          ],
          "filename": "canvas.js",
          "lineno": 563,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000943",
            "name": "CanvasConstructor#addBevelImage",
            "type": "MethodDefinition",
            "paramnames": [
              "buffer",
              "x",
              "y",
              "width",
              "height",
              "radius"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a beveled image.",
        "params": [
          {
            "type": {
              "names": [
                "Buffer"
              ]
            },
            "description": "The image's buffer.",
            "name": "buffer"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x to start drawing the element.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y to start drawing the element.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The width of the element.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The heigth of the element.",
            "name": "height"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius for the new image.",
            "name": "radius",
            "defaultvalue": 10
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "addBevelImage",
        "longname": "CanvasConstructor#addBevelImage",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#addBevelImage"
      },
      {
        "comment": "/**\n     * Add a circle or semi circle.\n     * @param {number} x                   The position x in the center of the circle.\n     * @param {number} y                   The position y in the center of the ircle.\n     * @param {number} radius              The radius for the clip.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            22902,
            22991
          ],
          "filename": "canvas.js",
          "lineno": 575,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000970",
            "name": "CanvasConstructor#addCircle",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "radius"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a circle or semi circle.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x in the center of the circle.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y in the center of the ircle.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius for the clip.",
            "name": "radius"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "addCircle",
        "longname": "CanvasConstructor#addCircle",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#addCircle"
      },
      {
        "comment": "/**\n     * Add an image.\n     * @param {Buffer} buffer  The image's buffer.\n     * @param {number} x       The position x to start drawing the element.\n     * @param {number} y       The position y to start drawing the element.\n     * @param {number} width   The width of the element.\n     * @param {number} height  The heigth of the element.\n     * @param {Object} options Options.\n     * @param {number} options.radius The radius for the new image.\n     * @param {'round'|'bevel'} options.type   The type for the new image.\n     * @param {boolean} options.restore Whether this method should restore the drawing state. Use this when you use options.type\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            20655,
            21299
          ],
          "filename": "canvas.js",
          "lineno": 523,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000795",
            "name": "CanvasConstructor#addImage",
            "type": "MethodDefinition",
            "paramnames": [
              "buffer",
              "x",
              "y",
              "width",
              "height",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add an image.",
        "params": [
          {
            "type": {
              "names": [
                "Buffer"
              ]
            },
            "description": "The image's buffer.",
            "name": "buffer"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x to start drawing the element.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y to start drawing the element.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The width of the element.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The heigth of the element.",
            "name": "height"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Options.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius for the new image.",
            "name": "options.radius"
          },
          {
            "type": {
              "names": [
                "'round'",
                "'bevel'"
              ]
            },
            "description": "The type for the new image.",
            "name": "options.type"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Whether this method should restore the drawing state. Use this when you use options.type",
            "name": "options.restore"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "addImage",
        "longname": "CanvasConstructor#addImage",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#addImage"
      },
      {
        "comment": "/**\n     * Add responsive text\n     * @param {string} text     The text to write.\n     * @param {number} x        The position x to start drawing the element.\n     * @param {number} y        The position y to start drawing the element.\n     * @param {number} maxWidth The max length in pixels for the text.\n     * @param {number} lineHeight The line's height.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @example\n     * new Canvas(400, 300)\n     *     .setTextFont('25px Tahoma')\n     *     .addMultilineText('This is a really long text!', 139, 360, 156, 28)\n     *     .toBuffer();\n     */",
        "meta": {
          "range": [
            12141,
            12746
          ],
          "filename": "canvas.js",
          "lineno": 316,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000490",
            "name": "CanvasConstructor#addMultilineText",
            "type": "MethodDefinition",
            "paramnames": [
              "text",
              "x",
              "y",
              "maxWidth",
              "lineHeight"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add responsive text",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The text to write.",
            "name": "text"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x to start drawing the element.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y to start drawing the element.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The max length in pixels for the text.",
            "name": "maxWidth"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The line's height.",
            "name": "lineHeight"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "examples": [
          "new Canvas(400, 300)\n    .setTextFont('25px Tahoma')\n    .addMultilineText('This is a really long text!', 139, 360, 156, 28)\n    .toBuffer();"
        ],
        "name": "addMultilineText",
        "longname": "CanvasConstructor#addMultilineText",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#addMultilineText"
      },
      {
        "comment": "/**\n     * Add a rectangle.\n     * @param {number} x      The position x to start drawing the element.\n     * @param {number} y      The position y to start drawing the element.\n     * @param {number} width  The width of the element.\n     * @param {number} height The heigth of the element.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect\n     */",
        "meta": {
          "range": [
            27725,
            27834
          ],
          "filename": "canvas.js",
          "lineno": 690,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001313",
            "name": "CanvasConstructor#addRect",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "width",
              "height"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a rectangle.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x to start drawing the element.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y to start drawing the element.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The width of the element.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The heigth of the element.",
            "name": "height"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect"
        ],
        "name": "addRect",
        "longname": "CanvasConstructor#addRect",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#addRect"
      },
      {
        "comment": "/**\n     * Add responsive text\n     * @param {string} text     The text to write.\n     * @param {number} x        The position x to start drawing the element.\n     * @param {number} y        The position y to start drawing the element.\n     * @param {number} maxWidth The max length in pixels for the text.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @example\n     * new Canvas(400, 300)\n     *     .setTextFont('40px Tahoma')\n     *     .addResponsiveText('Hello World', 30, 30, 50)\n     *     .toBuffer();\n     */",
        "meta": {
          "range": [
            11097,
            11523
          ],
          "filename": "canvas.js",
          "lineno": 291,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000422",
            "name": "CanvasConstructor#addResponsiveText",
            "type": "MethodDefinition",
            "paramnames": [
              "text",
              "x",
              "y",
              "maxWidth"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add responsive text",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The text to write.",
            "name": "text"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x to start drawing the element.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y to start drawing the element.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The max length in pixels for the text.",
            "name": "maxWidth"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "examples": [
          "new Canvas(400, 300)\n    .setTextFont('40px Tahoma')\n    .addResponsiveText('Hello World', 30, 30, 50)\n    .toBuffer();"
        ],
        "name": "addResponsiveText",
        "longname": "CanvasConstructor#addResponsiveText",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#addResponsiveText"
      },
      {
        "comment": "/**\n     * Add a round image.\n     * @param {Buffer} buffer The image's buffer.\n     * @param {number} x      The position x to start drawing the element.\n     * @param {number} y      The position y to start drawing the element.\n     * @param {number} width  The width of the element.\n     * @param {number} height The heigth of the element.\n     * @param {number} radius The radius for the new image.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            21774,
            21923
          ],
          "filename": "canvas.js",
          "lineno": 548,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000916",
            "name": "CanvasConstructor#addRoundImage",
            "type": "MethodDefinition",
            "paramnames": [
              "buffer",
              "x",
              "y",
              "width",
              "height",
              "radius"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a round image.",
        "params": [
          {
            "type": {
              "names": [
                "Buffer"
              ]
            },
            "description": "The image's buffer.",
            "name": "buffer"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x to start drawing the element.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y to start drawing the element.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The width of the element.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The heigth of the element.",
            "name": "height"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius for the new image.",
            "name": "radius",
            "defaultvalue": 10
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "addRoundImage",
        "longname": "CanvasConstructor#addRoundImage",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#addRoundImage"
      },
      {
        "comment": "/**\n     * Paints a rectangle which has a starting point at (x, y) and has a w width and an h height onto the canvas, using\n     * the current stroke style.\n     * @param {number} x      The x axis of the coordinate for the rectangle starting point.\n     * @param {number} y      The y axis of the coordinate for the rectangle starting point.\n     * @param {number} width  The rectangle's width.\n     * @param {number} height The rectangle's height.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect\n     */",
        "meta": {
          "range": [
            13764,
            13881
          ],
          "filename": "canvas.js",
          "lineno": 358,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000607",
            "name": "CanvasConstructor#addStrokeRect",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "width",
              "height"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Paints a rectangle which has a starting point at (x, y) and has a w width and an h height onto the canvas, using\nthe current stroke style.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate for the rectangle starting point.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate for the rectangle starting point.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The rectangle's width.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The rectangle's height.",
            "name": "height"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect"
        ],
        "name": "addStrokeRect",
        "longname": "CanvasConstructor#addStrokeRect",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#addStrokeRect"
      },
      {
        "comment": "/**\n     * Add stroked text.\n     * @param {string} text The text to write.\n     * @param {number} x    The position x to start drawing the element.\n     * @param {number} y    The position y to start drawing the element.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText\n     */",
        "meta": {
          "range": [
            14272,
            14371
          ],
          "filename": "canvas.js",
          "lineno": 372,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000628",
            "name": "CanvasConstructor#addStrokeText",
            "type": "MethodDefinition",
            "paramnames": [
              "text",
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add stroked text.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The text to write.",
            "name": "text"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x to start drawing the element.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y to start drawing the element.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText"
        ],
        "name": "addStrokeText",
        "longname": "CanvasConstructor#addStrokeText",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#addStrokeText"
      },
      {
        "comment": "/**\n     * Add a text.\n     * @param {string} text The text to write.\n     * @param {number} x    The position x to start drawing the element.\n     * @param {number} y    The position y to start drawing the element.\n     * @param {number} maxWidth The maximum width to draw. If specified, and the string is computed to be wider than\n     * this width, the font is adjusted to use a more horizontally condensed font.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText\n     */",
        "meta": {
          "range": [
            10443,
            10554
          ],
          "filename": "canvas.js",
          "lineno": 272,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000401",
            "name": "CanvasConstructor#addText",
            "type": "MethodDefinition",
            "paramnames": [
              "text",
              "x",
              "y",
              "maxWidth"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a text.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The text to write.",
            "name": "text"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x to start drawing the element.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y to start drawing the element.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The maximum width to draw. If specified, and the string is computed to be wider than\nthis width, the font is adjusted to use a more horizontally condensed font.",
            "name": "maxWidth"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText"
        ],
        "name": "addText",
        "longname": "CanvasConstructor#addText",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#addText"
      },
      {
        "comment": "/**\n     * Register a new font (Canvas 1.6.x).\n     * @param {string} path   The path for the font.\n     * @param {string} family The font's family name.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            50525,
            50721
          ],
          "filename": "canvas.js",
          "lineno": 1225,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100002104",
            "name": "CanvasConstructor#addTextFont",
            "type": "MethodDefinition",
            "paramnames": [
              "path",
              "family"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Register a new font (Canvas 1.6.x).",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path for the font.",
            "name": "path"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The font's family name.",
            "name": "family"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "addTextFont",
        "longname": "CanvasConstructor#addTextFont",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#addTextFont"
      },
      {
        "comment": "/**\n     * Adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at\n     * endAngle going in the given direction by anticlockwise (defaulting to clockwise).\n     * @param {number} x          The x coordinate of the arc's center.\n     * @param {number} y          The y coordinate of the arc's center.\n     * @param {number} radius     The arc's radius.\n     * @param {number} startAngle The angle at which the arc starts, measured clockwise from the positive x axis and\n     * expressed in radians.\n     * @param {number} endAngle   The angle at which the arc ends, measured clockwise from the positive x axis and\n     * expressed in radians.\n     * @param {boolean} [anticlockwise=false] An optional Boolean which, if true, causes the arc to be drawn\n     * counter-clockwise between the two angles. By default it is drawn clockwise.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc\n     */",
        "meta": {
          "range": [
            37176,
            37344
          ],
          "filename": "canvas.js",
          "lineno": 894,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001634",
            "name": "CanvasConstructor#arc",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "radius",
              "startAngle",
              "endAngle",
              "anticlockwise"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at\nendAngle going in the given direction by anticlockwise (defaulting to clockwise).",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x coordinate of the arc's center.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y coordinate of the arc's center.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The arc's radius.",
            "name": "radius"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The angle at which the arc starts, measured clockwise from the positive x axis and\nexpressed in radians.",
            "name": "startAngle"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The angle at which the arc ends, measured clockwise from the positive x axis and\nexpressed in radians.",
            "name": "endAngle"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "An optional Boolean which, if true, causes the arc to be drawn\ncounter-clockwise between the two angles. By default it is drawn clockwise.",
            "name": "anticlockwise"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc"
        ],
        "name": "arc",
        "longname": "CanvasConstructor#arc",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#arc"
      },
      {
        "comment": "/**\n     * Adds an arc to the path with the given control points and radius, connected to the previous point by a straight line.\n     * @param {number} x1     The x axis of the coordinate for the first control point.\n     * @param {number} y1     The y axis of the coordinate for the first control point.\n     * @param {number} x2     The x axis of the coordinate for the second control point.\n     * @param {number} y2     The y axis of the coordinate for the second control point.\n     * @param {number} radius The arc's radius.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo\n     */",
        "meta": {
          "range": [
            38039,
            38149
          ],
          "filename": "canvas.js",
          "lineno": 910,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001661",
            "name": "CanvasConstructor#arcTo",
            "type": "MethodDefinition",
            "paramnames": [
              "x1",
              "y1",
              "x2",
              "y2",
              "radius"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds an arc to the path with the given control points and radius, connected to the previous point by a straight line.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate for the first control point.",
            "name": "x1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate for the first control point.",
            "name": "y1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate for the second control point.",
            "name": "x2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate for the second control point.",
            "name": "y2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The arc's radius.",
            "name": "radius"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo"
        ],
        "name": "arcTo",
        "longname": "CanvasConstructor#arcTo",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#arcTo"
      },
      {
        "comment": "/**\n     * Starts a new path by emptying the list of sub-paths.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath\n     */",
        "meta": {
          "range": [
            29572,
            29646
          ],
          "filename": "canvas.js",
          "lineno": 749,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001394",
            "name": "CanvasConstructor#beginPath",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Starts a new path by emptying the list of sub-paths.",
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath"
        ],
        "name": "beginPath",
        "longname": "CanvasConstructor#beginPath",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "params": [],
        "$longname": "CanvasConstructor#beginPath"
      },
      {
        "comment": "/**\n     * Adds a cubic Bézier curve to the path. It requires three points. The first two points are control points and the\n     * third one is the end point. The starting point is the last point in the current path, which can be changed using\n     * moveTo() before creating the Bézier curve.\n     * @param {number} cp1x The x axis of the coordinate for the first control point.\n     * @param {number} cp1y The y axis of the coordinate for first control point.\n     * @param {number} cp2x The x axis of the coordinate for the second control point.\n     * @param {number} cp2y The y axis of the coordinate for the second control point.\n     * @param {number} x    The x axis of the coordinate for the end point.\n     * @param {number} y    The y axis of the coordinate for the end point.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo\n     */",
        "meta": {
          "range": [
            40010,
            40148
          ],
          "filename": "canvas.js",
          "lineno": 946,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001705",
            "name": "CanvasConstructor#bezierCurveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "cp1x",
              "cp1y",
              "cp2x",
              "cp2y",
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds a cubic Bézier curve to the path. It requires three points. The first two points are control points and the\nthird one is the end point. The starting point is the last point in the current path, which can be changed using\nmoveTo() before creating the Bézier curve.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate for the first control point.",
            "name": "cp1x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate for first control point.",
            "name": "cp1y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate for the second control point.",
            "name": "cp2x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate for the second control point.",
            "name": "cp2y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate for the end point.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate for the end point.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo"
        ],
        "name": "bezierCurveTo",
        "longname": "CanvasConstructor#bezierCurveTo",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#bezierCurveTo"
      },
      {
        "comment": "/**\n     * Change the current canvas' height.\n     * @param {number} height The new height for the canvas.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            2466,
            2557
          ],
          "filename": "canvas.js",
          "lineno": 95,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000147",
            "name": "CanvasConstructor#changeCanvasHeigth",
            "type": "MethodDefinition",
            "paramnames": [
              "height"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the current canvas' height.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new height for the canvas.",
            "name": "height"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "changeCanvasHeigth",
        "longname": "CanvasConstructor#changeCanvasHeigth",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#changeCanvasHeigth"
      },
      {
        "comment": "/**\n     * Change the current canvas' size.\n     * @param {number} width  The new width for the canvas.\n     * @param {number} height The new heigth for the canvas.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            1699,
            2023
          ],
          "filename": "canvas.js",
          "lineno": 65,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000081",
            "name": "CanvasConstructor#changeCanvasSize",
            "type": "MethodDefinition",
            "paramnames": [
              "width",
              "height"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the current canvas' size.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new width for the canvas.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new heigth for the canvas.",
            "name": "height"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "changeCanvasSize",
        "longname": "CanvasConstructor#changeCanvasSize",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#changeCanvasSize"
      },
      {
        "comment": "/**\n     * Change the current canvas' width.\n     * @param {number} width The new width for the canvas.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            2199,
            2287
          ],
          "filename": "canvas.js",
          "lineno": 85,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000135",
            "name": "CanvasConstructor#changeCanvasWidth",
            "type": "MethodDefinition",
            "paramnames": [
              "width"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the current canvas' width.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new width for the canvas.",
            "name": "width"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "changeCanvasWidth",
        "longname": "CanvasConstructor#changeCanvasWidth",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#changeCanvasWidth"
      },
      {
        "comment": "/**\n     * Clear a circle.\n     * @param {number} x                   The position x in the center of the clip's circle.\n     * @param {number} y                   The position y in the center of the clip's circle.\n     * @param {number} radius              The radius for the clip.\n     * @param {number} [start=0]           The degree in radians to start drawing the circle.\n     * @param {number} [angle=Math.PI * 2] The degree in radians to finish drawing the circle, defaults to a full circle.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            46816,
            47032
          ],
          "filename": "canvas.js",
          "lineno": 1121,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001928",
            "name": "CanvasConstructor#clearCircle",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "radius",
              "start",
              "angle"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Clear a circle.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x in the center of the clip's circle.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y in the center of the clip's circle.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius for the clip.",
            "name": "radius"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The degree in radians to start drawing the circle.",
            "name": "start"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "Math.PI * 2",
            "description": "The degree in radians to finish drawing the circle, defaults to a full circle.",
            "name": "angle"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "clearCircle",
        "longname": "CanvasConstructor#clearCircle",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#clearCircle"
      },
      {
        "comment": "/**\n     * Clear an area.\n     * @param {number} [x=0]                The position x to start drawing the element.\n     * @param {number} [y=0]                The position y to start drawing the element.\n     * @param {number} [width=this.width]   The width of the element.\n     * @param {number} [height=this.heigth] The heigth of the element.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect\n     */",
        "meta": {
          "range": [
            47545,
            47694
          ],
          "filename": "canvas.js",
          "lineno": 1137,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001970",
            "name": "CanvasConstructor#clearPixels",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "width",
              "height"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Clear an area.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The position x to start drawing the element.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The position y to start drawing the element.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "this.width",
            "description": "The width of the element.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "this.heigth",
            "description": "The heigth of the element.",
            "name": "height"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect"
        ],
        "name": "clearPixels",
        "longname": "CanvasConstructor#clearPixels",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#clearPixels"
      },
      {
        "comment": "/**\n     * Turns the path currently being built into the current clipping path.\n     * @param {any} path A Path2D path to fill.\n     * @param {('nonzero'|'evenodd')} fillRule The algorithm by which to determine if a point is inside a path or\n     * outside a path.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip\n     */",
        "meta": {
          "range": [
            5143,
            5229
          ],
          "filename": "canvas.js",
          "lineno": 168,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000234",
            "name": "CanvasConstructor#clip",
            "type": "MethodDefinition",
            "paramnames": [
              "path",
              "fillRule"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Turns the path currently being built into the current clipping path.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "A Path2D path to fill.",
            "name": "path"
          },
          {
            "type": {
              "names": [
                "'nonzero'",
                "'evenodd'"
              ]
            },
            "description": "The algorithm by which to determine if a point is inside a path or\noutside a path.",
            "name": "fillRule"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip"
        ],
        "name": "clip",
        "longname": "CanvasConstructor#clip",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#clip"
      },
      {
        "comment": "/**\n     * Causes the point of the pen to move back to the start of the current sub-path.\n     * If the shape has already been closed or has only one point, this function does nothing.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath\n     */",
        "meta": {
          "range": [
            29999,
            30073
          ],
          "filename": "canvas.js",
          "lineno": 761,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001407",
            "name": "CanvasConstructor#closePath",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Causes the point of the pen to move back to the start of the current sub-path.\nIf the shape has already been closed or has only one point, this function does nothing.",
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath"
        ],
        "name": "closePath",
        "longname": "CanvasConstructor#closePath",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "params": [],
        "$longname": "CanvasConstructor#closePath"
      },
      {
        "comment": "/**\n     * Create a round clip.\n     * @param {number} x      The position x to start drawing clip.\n     * @param {number} y      The position y to start drawing clip.\n     * @param {number} width  The width of clip.\n     * @param {number} height The heigth of clip.\n     * @param {number} radius The radius for clip's rounded borders.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            27138,
            27267
          ],
          "filename": "canvas.js",
          "lineno": 676,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001291",
            "name": "CanvasConstructor#createBeveledClip",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "width",
              "height",
              "radius"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Create a round clip.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x to start drawing clip.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y to start drawing clip.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The width of clip.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The heigth of clip.",
            "name": "height"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius for clip's rounded borders.",
            "name": "radius"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "createBeveledClip",
        "longname": "CanvasConstructor#createBeveledClip",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#createBeveledClip"
      },
      {
        "comment": "/**\n     * Create a round path.\n     * @param {number} x      The position x to start drawing clip.\n     * @param {number} y      The position y to start drawing clip.\n     * @param {number} width  The width of clip.\n     * @param {number} height The heigth of clip.\n     * @param {number} radius The radius for clip's rounded borders.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            25837,
            26730
          ],
          "filename": "canvas.js",
          "lineno": 647,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001105",
            "name": "CanvasConstructor#createBeveledPath",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "width",
              "height",
              "radius"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Create a round path.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x to start drawing clip.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y to start drawing clip.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The width of clip.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The heigth of clip.",
            "name": "height"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius for clip's rounded borders.",
            "name": "radius"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "createBeveledPath",
        "longname": "CanvasConstructor#createBeveledPath",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#createBeveledPath"
      },
      {
        "comment": "/**\n     * Adds an ellipse to the path which is centered at (x, y) position with the radii radiusX and radiusY starting at\n     * startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).\n     * @param {number} x          The x axis of the coordinate for the ellipse's center.\n     * @param {number} y          The y axis of the coordinate for the ellipse's center.\n     * @param {number} radiusX    The ellipse's major-axis radius.\n     * @param {number} radiusY    The ellipse's minor-axis radius.\n     * @param {number} rotation   The rotation for this ellipse, expressed in radians.\n     * @param {number} startAngle The starting point, measured from the x axis, from which it will be drawn, expressed\n     * in radians.\n     * @param {number} endAngle   The end ellipse's angle to which it will be drawn, expressed in radians.\n     * @param {boolean} [anticlockwise=false] An optional Boolean which, if true, draws the ellipse anticlockwise\n     * (counter-clockwise), otherwise in a clockwise direction.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse\n     */",
        "meta": {
          "range": [
            35910,
            36124
          ],
          "filename": "canvas.js",
          "lineno": 873,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001605",
            "name": "CanvasConstructor#createEllipse",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "radiusX",
              "radiusY",
              "rotation",
              "startAngle",
              "endAngle",
              "anticlockwise"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds an ellipse to the path which is centered at (x, y) position with the radii radiusX and radiusY starting at\nstartAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate for the ellipse's center.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate for the ellipse's center.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ellipse's major-axis radius.",
            "name": "radiusX"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ellipse's minor-axis radius.",
            "name": "radiusY"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The rotation for this ellipse, expressed in radians.",
            "name": "rotation"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The starting point, measured from the x axis, from which it will be drawn, expressed\nin radians.",
            "name": "startAngle"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The end ellipse's angle to which it will be drawn, expressed in radians.",
            "name": "endAngle"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "An optional Boolean which, if true, draws the ellipse anticlockwise\n(counter-clockwise), otherwise in a clockwise direction.",
            "name": "anticlockwise"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse"
        ],
        "name": "createEllipse",
        "longname": "CanvasConstructor#createEllipse",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#createEllipse"
      },
      {
        "comment": "/**\n     * Creates a gradient along the line given by the coordinates represented by the parameters.\n     * The coordinates are global, the second point does not rely on the position of the first and vice versa.\n     * @param {number} x0 The x axis of the coordinate of the start point.\n     * @param {number} y0 The y axis of the coordinate of the start point.\n     * @param {number} x1 The x axis of the coordinate of the end point.\n     * @param {number} y1 The y axis of the coordinate of the end point.\n     * @param {GradientStep[]} [steps=[]] The steps.\n     * @returns {CanvasGradient}\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\n     */",
        "meta": {
          "range": [
            31388,
            31663
          ],
          "filename": "canvas.js",
          "lineno": 791,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001437",
            "name": "CanvasConstructor#createLinearGradient",
            "type": "MethodDefinition",
            "paramnames": [
              "x0",
              "y0",
              "x1",
              "y1",
              "steps"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Creates a gradient along the line given by the coordinates represented by the parameters.\nThe coordinates are global, the second point does not rely on the position of the first and vice versa.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate of the start point.",
            "name": "x0"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate of the start point.",
            "name": "y0"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate of the end point.",
            "name": "x1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate of the end point.",
            "name": "y1"
          },
          {
            "type": {
              "names": [
                "Array.<GradientStep>"
              ]
            },
            "optional": true,
            "defaultvalue": "[]",
            "description": "The steps.",
            "name": "steps"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasGradient"
              ]
            }
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient"
        ],
        "name": "createLinearGradient",
        "longname": "CanvasConstructor#createLinearGradient",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#createLinearGradient"
      },
      {
        "comment": "/**\n     * Creates a pattern using the specified image. It repeats the source in the directions specified by the repetition\n     * argument.\n     * @param {Image} image A Canvas Image to be used as the image to repeat.\n     * @param {('repeat'|'repeat-x'|'repeat-y'|'no-repeat')} repetition The repeat mode.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern\n     */",
        "meta": {
          "range": [
            30553,
            30669
          ],
          "filename": "canvas.js",
          "lineno": 775,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001420",
            "name": "CanvasConstructor#createPattern",
            "type": "MethodDefinition",
            "paramnames": [
              "image",
              "repetition"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Creates a pattern using the specified image. It repeats the source in the directions specified by the repetition\nargument.",
        "params": [
          {
            "type": {
              "names": [
                "Image"
              ]
            },
            "description": "A Canvas Image to be used as the image to repeat.",
            "name": "image"
          },
          {
            "type": {
              "names": [
                "'repeat'",
                "'repeat-x'",
                "'repeat-y'",
                "'no-repeat'"
              ]
            },
            "description": "The repeat mode.",
            "name": "repetition"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern"
        ],
        "name": "createPattern",
        "longname": "CanvasConstructor#createPattern",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#createPattern"
      },
      {
        "comment": "/**\n     * Creates a radial gradient given by the coordinates of the two circles represented by the parameters.\n     * @param {number} x0 The x axis of the coordinate of the start circle.\n     * @param {number} y0 The y axis of the coordinate of the start circle.\n     * @param {number} r0 The radius of the start circle.\n     * @param {number} x1 The x axis of the coordinate of the end circle.\n     * @param {number} y1 The y axis of the coordinate of the end circle.\n     * @param {number} r1 The radius of the end circle.\n     * @param {GradientStep[]} [steps=[]] The steps.\n     * @returns {CanvasGradient}\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\n     */",
        "meta": {
          "range": [
            33380,
            33671
          ],
          "filename": "canvas.js",
          "lineno": 829,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001517",
            "name": "CanvasConstructor#createRadialGradient",
            "type": "MethodDefinition",
            "paramnames": [
              "x0",
              "y0",
              "r0",
              "x1",
              "y1",
              "r1",
              "steps"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Creates a radial gradient given by the coordinates of the two circles represented by the parameters.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate of the start circle.",
            "name": "x0"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate of the start circle.",
            "name": "y0"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius of the start circle.",
            "name": "r0"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate of the end circle.",
            "name": "x1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate of the end circle.",
            "name": "y1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius of the end circle.",
            "name": "r1"
          },
          {
            "type": {
              "names": [
                "Array.<GradientStep>"
              ]
            },
            "optional": true,
            "defaultvalue": "[]",
            "description": "The steps.",
            "name": "steps"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasGradient"
              ]
            }
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient"
        ],
        "name": "createRadialGradient",
        "longname": "CanvasConstructor#createRadialGradient",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#createRadialGradient"
      },
      {
        "comment": "/**\n     * Create a rectangle clip.\n     * @param {number} x      The position x in the left corner.\n     * @param {number} y      The position y in the upper corner.\n     * @param {number} width  The width of the rectangle.\n     * @param {number} height The height of the rectangle.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            25322,
            25429
          ],
          "filename": "canvas.js",
          "lineno": 633,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001085",
            "name": "CanvasConstructor#createRectClip",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "width",
              "height"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Create a rectangle clip.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x in the left corner.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y in the upper corner.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The width of the rectangle.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The height of the rectangle.",
            "name": "height"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "createRectClip",
        "longname": "CanvasConstructor#createRectClip",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#createRectClip"
      },
      {
        "comment": "/**\n     * Create a rectangle path.\n     * @param {number} x      The position x in the left corner.\n     * @param {number} y      The position y in the upper corner.\n     * @param {number} width  The width of the rectangle.\n     * @param {number} height The height of the rectangle.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            24854,
            24966
          ],
          "filename": "canvas.js",
          "lineno": 619,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001064",
            "name": "CanvasConstructor#createRectPath",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "width",
              "height"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Create a rectangle path.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x in the left corner.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y in the upper corner.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The width of the rectangle.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The height of the rectangle.",
            "name": "height"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "createRectPath",
        "longname": "CanvasConstructor#createRectPath",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#createRectPath"
      },
      {
        "comment": "/**\n     * Create a round clip.\n     * @param {number} x                   The position x in the center of the clip's circle.\n     * @param {number} y                   The position y in the center of the clip's circle.\n     * @param {number} radius              The radius for the clip.\n     * @param {number} [start=0]           The degree in radians to start drawing the circle.\n     * @param {number} [angle=Math.PI * 2] The degree in radians to finish drawing the circle, defaults to a full circle.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            24357,
            24498
          ],
          "filename": "canvas.js",
          "lineno": 606,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001034",
            "name": "CanvasConstructor#createRoundClip",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "radius",
              "start",
              "angle"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Create a round clip.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x in the center of the clip's circle.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y in the center of the clip's circle.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius for the clip.",
            "name": "radius"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The degree in radians to start drawing the circle.",
            "name": "start"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "Math.PI * 2",
            "description": "The degree in radians to finish drawing the circle, defaults to a full circle.",
            "name": "angle"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "createRoundClip",
        "longname": "CanvasConstructor#createRoundClip",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#createRoundClip"
      },
      {
        "comment": "/**\n     * Create a round path.\n     * @param {number} x                   The position x in the center of the clip's circle.\n     * @param {number} y                   The position y in the center of the clip's circle.\n     * @param {number} radius              The radius for the clip.\n     * @param {number} [start=0]           The degree in radians to start drawing the circle.\n     * @param {number} [angle=Math.PI * 2] The degree in radians to finish drawing the circle, defaults to a full circle.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            23567,
            23781
          ],
          "filename": "canvas.js",
          "lineno": 589,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000988",
            "name": "CanvasConstructor#createRoundPath",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "radius",
              "start",
              "angle"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Create a round path.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position x in the center of the clip's circle.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The position y in the center of the clip's circle.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius for the clip.",
            "name": "radius"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The degree in radians to start drawing the circle.",
            "name": "start"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "Math.PI * 2",
            "description": "The degree in radians to finish drawing the circle, defaults to a full circle.",
            "name": "angle"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "createRoundPath",
        "longname": "CanvasConstructor#createRoundPath",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#createRoundPath"
      },
      {
        "comment": "/**\n     * Fills the current or given path with the current fill style using the non-zero or even-odd winding rule.\n     * @param {any} path A Path2D path to fill.\n     * @param {('nonzero'|'evenodd')} fillRule The algorithm by which to determine if a point is inside a path or\n     * outside a path.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill\n     */",
        "meta": {
          "range": [
            9768,
            9860
          ],
          "filename": "canvas.js",
          "lineno": 256,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000384",
            "name": "CanvasConstructor#fill",
            "type": "MethodDefinition",
            "paramnames": [
              "path",
              "fillRule"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Fills the current or given path with the current fill style using the non-zero or even-odd winding rule.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "A Path2D path to fill.",
            "name": "path"
          },
          {
            "type": {
              "names": [
                "'nonzero'",
                "'evenodd'"
              ]
            },
            "description": "The algorithm by which to determine if a point is inside a path or\noutside a path.",
            "name": "fillRule"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill"
        ],
        "name": "fill",
        "longname": "CanvasConstructor#fill",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#fill"
      },
      {
        "comment": "/**\n     * Returns an ImageData object representing the underlying pixel data for the area of the canvas denoted by the rectangle which starts at (sx, sy)\n     * and has an sw width and sh height. This method is not affected by the canvas transformation matrix.\n     * @param {(number|Function)} [x] The x coordinate of the upper left corner of the rectangle from which the ImageData will be extracted.\n     * @param {number} [y] The y coordinate of the upper left corner of the rectangle from which the ImageData will be extracted.\n     * @param {number} [width] The width of the rectangle from which the ImageData will be extracted.\n     * @param {number} [height] The height of the rectangle from which the ImageData will be extracted.\n     * @param {Function} callback The callback, if not specified, this method won't be chainable as it will return a\n     * number. If you use an arrow function, you might want to use the second argument which is the instance of the\n     * class. Otherwise, the keyword this is binded to the class instance itself, so you can use it safely.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData\n     */",
        "meta": {
          "range": [
            7379,
            7868
          ],
          "filename": "canvas.js",
          "lineno": 214,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000290",
            "name": "CanvasConstructor#getImageData",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "width",
              "height",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns an ImageData object representing the underlying pixel data for the area of the canvas denoted by the rectangle which starts at (sx, sy)\nand has an sw width and sh height. This method is not affected by the canvas transformation matrix.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "function"
              ]
            },
            "optional": true,
            "description": "The x coordinate of the upper left corner of the rectangle from which the ImageData will be extracted.",
            "name": "x",
            "defaultvalue": 0
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "The y coordinate of the upper left corner of the rectangle from which the ImageData will be extracted.",
            "name": "y",
            "defaultvalue": 0
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "The width of the rectangle from which the ImageData will be extracted.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "The height of the rectangle from which the ImageData will be extracted.",
            "name": "height"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback, if not specified, this method won't be chainable as it will return a\nnumber. If you use an arrow function, you might want to use the second argument which is the instance of the\nclass. Otherwise, the keyword this is binded to the class instance itself, so you can use it safely.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData"
        ],
        "name": "getImageData",
        "longname": "CanvasConstructor#getImageData",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#getImageData"
      },
      {
        "comment": "/**\n         * The image height of this canvas\n         * @since 0.0.1\n         * @type {number}\n         */",
        "meta": {
          "range": [
            1435,
            1455
          ],
          "filename": "canvas.js",
          "lineno": 55,
          "columnno": 8,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000076",
            "name": "this.height",
            "type": "Identifier",
            "value": "height",
            "paramnames": []
          }
        },
        "description": "The image height of this canvas",
        "since": "0.0.1",
        "type": {
          "names": [
            "number"
          ]
        },
        "name": "height",
        "longname": "CanvasConstructor#height",
        "kind": "member",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#height"
      },
      {
        "comment": "/**\n     * Reports whether or not the specified point is contained in the current path.\n     * @param {number} x The X coordinate of the point to check.\n     * @param {number} y The Y coordinate of the point to check.\n     * @param {('nonzero'|'evenodd')} fillRule The algorithm by which to determine if a point is inside a path or\n     * outside a path.\n     * @returns {boolean}\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath\n     */",
        "meta": {
          "range": [
            49173,
            49269
          ],
          "filename": "canvas.js",
          "lineno": 1179,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100002023",
            "name": "CanvasConstructor#isPointInPath",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "fillRule"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Reports whether or not the specified point is contained in the current path.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The X coordinate of the point to check.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The Y coordinate of the point to check.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "'nonzero'",
                "'evenodd'"
              ]
            },
            "description": "The algorithm by which to determine if a point is inside a path or\noutside a path.",
            "name": "fillRule"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            }
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath"
        ],
        "name": "isPointInPath",
        "longname": "CanvasConstructor#isPointInPath",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#isPointInPath"
      },
      {
        "comment": "/**\n     * Reports whether or not the specified point is inside the area contained by the stroking of a path.\n     * @param {number} x The X coordinate of the point to check.\n     * @param {number} y The Y coordinate of the point to check.\n     * @returns {boolean}\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke\n     */",
        "meta": {
          "range": [
            49655,
            49735
          ],
          "filename": "canvas.js",
          "lineno": 1190,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100002040",
            "name": "CanvasConstructor#isPointInStroke",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Reports whether or not the specified point is inside the area contained by the stroking of a path.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The X coordinate of the point to check.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The Y coordinate of the point to check.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            }
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke"
        ],
        "name": "isPointInStroke",
        "longname": "CanvasConstructor#isPointInStroke",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#isPointInStroke"
      },
      {
        "comment": "/**\n     * Connects the last point in the sub-path to the x, y coordinates with a straight line\n     * @param {number} x The x axis of the coordinate for the end of the line.\n     * @param {number} y The y axis of the coordinate for the end of the line.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo\n     */",
        "meta": {
          "range": [
            40567,
            40643
          ],
          "filename": "canvas.js",
          "lineno": 959,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001730",
            "name": "CanvasConstructor#lineTo",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Connects the last point in the sub-path to the x, y coordinates with a straight line",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate for the end of the line.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate for the end of the line.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo"
        ],
        "name": "lineTo",
        "longname": "CanvasConstructor#lineTo",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#lineTo"
      },
      {
        "comment": "/**\n     * Measure a text's width given a string.\n     * If a callback is not passed, this method will not be chainable, and it will return an integer instead.\n     * @param {string}   text     The text to measure.\n     * @param {Function} callback The callback, if not specified, this method won't be chainable as it will return a\n     * number. If you use an arrow function, you might want to use the second argument which is the instance of the\n     * class. Otherwise, the keyword this is binded to the class instance itself, so you can use it safely.\n     * @returns {(CanvasConstructor|number)}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText\n     * @example\n     * new Canvas(500, 400)\n     *     .setTextFont('40px Tahoma')\n     *     .measureText('Hello World!', function(size) {\n     *         const newSize = size.width < 500 ? 40 : (500 / size.width) * 40;\n     *         this.setTextFont(`${newSize}px Tahoma`);\n     *     })\n     *     .addText('Hello World!', 30, 50)\n     *     .toBuffer(); // Returns a Buffer\n     * @example\n     * new Canvas(500, 400)\n     *     .setTextFont('40px Tahoma')\n     *     .measureText('Hello World!', (size, inst) => {\n     *         const newSize = size.width < 500 ? 40 : (500 / size.width) * 40;\n     *         inst.setTextFont(`${newSize}px`);\n     *     })\n     *     .addText('Hello World!', 30, 50)\n     *     .toBuffer(); // Returns a Buffer\n     * @example\n     * const size = new Canvas(500, 400)\n     *     .setTextFont('40px Tahoma')\n     *     .measureText('Hello World!'); // Returns a number\n     *\n     * const newSize = size.width < 500 ? 40 : (500 / size.width) * 40;\n     *\n     * new Canvas(500, 400)\n     *     .setTextFont(`${newSize}px Tahoma`)\n     *     .addText('Hello World!', 30, 50)\n     *     .toBuffer(); // Returns a Buffer\n     */",
        "meta": {
          "range": [
            16262,
            16575
          ],
          "filename": "canvas.js",
          "lineno": 417,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000647",
            "name": "CanvasConstructor#measureText",
            "type": "MethodDefinition",
            "paramnames": [
              "text",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Measure a text's width given a string.\nIf a callback is not passed, this method will not be chainable, and it will return an integer instead.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The text to measure.",
            "name": "text"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback, if not specified, this method won't be chainable as it will return a\nnumber. If you use an arrow function, you might want to use the second argument which is the instance of the\nclass. Otherwise, the keyword this is binded to the class instance itself, so you can use it safely.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor",
                "number"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText"
        ],
        "examples": [
          "new Canvas(500, 400)\n    .setTextFont('40px Tahoma')\n    .measureText('Hello World!', function(size) {\n        const newSize = size.width < 500 ? 40 : (500 / size.width) * 40;\n        this.setTextFont(`${newSize}px Tahoma`);\n    })\n    .addText('Hello World!', 30, 50)\n    .toBuffer(); // Returns a Buffer",
          "new Canvas(500, 400)\n    .setTextFont('40px Tahoma')\n    .measureText('Hello World!', (size, inst) => {\n        const newSize = size.width < 500 ? 40 : (500 / size.width) * 40;\n        inst.setTextFont(`${newSize}px`);\n    })\n    .addText('Hello World!', 30, 50)\n    .toBuffer(); // Returns a Buffer",
          "const size = new Canvas(500, 400)\n    .setTextFont('40px Tahoma')\n    .measureText('Hello World!'); // Returns a number\n\nconst newSize = size.width < 500 ? 40 : (500 / size.width) * 40;\n\nnew Canvas(500, 400)\n    .setTextFont(`${newSize}px Tahoma`)\n    .addText('Hello World!', 30, 50)\n    .toBuffer(); // Returns a Buffer"
        ],
        "name": "measureText",
        "longname": "CanvasConstructor#measureText",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#measureText"
      },
      {
        "comment": "/**\n     * Moves the starting point of a new sub-path to the (x, y) coordinates.\n     * @param {number} x The x axis of the point.\n     * @param {number} y The y axis of the point.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo\n     */",
        "meta": {
          "range": [
            40989,
            41065
          ],
          "filename": "canvas.js",
          "lineno": 972,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001747",
            "name": "CanvasConstructor#moveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the starting point of a new sub-path to the (x, y) coordinates.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the point.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the point.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo"
        ],
        "name": "moveTo",
        "longname": "CanvasConstructor#moveTo",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#moveTo"
      },
      {
        "comment": "/**\n     * Creates a gradient along the line given by the coordinates represented by the parameters.\n     * The coordinates are global, the second point does not rely on the position of the first and vice versa. This\n     * method is chainable and calls setColor after creating the gradient.\n     * @param {number} x0 The x axis of the coordinate of the start point.\n     * @param {number} y0 The y axis of the coordinate of the start point.\n     * @param {number} x1 The x axis of the coordinate of the end point.\n     * @param {number} y1 The y axis of the coordinate of the end point.\n     * @param {GradientStep[]} steps The steps.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\n     */",
        "meta": {
          "range": [
            32478,
            32643
          ],
          "filename": "canvas.js",
          "lineno": 812,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001490",
            "name": "CanvasConstructor#printLinearGradient",
            "type": "MethodDefinition",
            "paramnames": [
              "x0",
              "y0",
              "x1",
              "y1",
              "steps"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Creates a gradient along the line given by the coordinates represented by the parameters.\nThe coordinates are global, the second point does not rely on the position of the first and vice versa. This\nmethod is chainable and calls setColor after creating the gradient.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate of the start point.",
            "name": "x0"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate of the start point.",
            "name": "y0"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate of the end point.",
            "name": "x1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate of the end point.",
            "name": "y1"
          },
          {
            "type": {
              "names": [
                "Array.<GradientStep>"
              ]
            },
            "description": "The steps.",
            "name": "steps"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient"
        ],
        "name": "printLinearGradient",
        "longname": "CanvasConstructor#printLinearGradient",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#printLinearGradient"
      },
      {
        "comment": "/**\n     * Creates a radial gradient given by the coordinates of the two circles represented by the parameters. This\n     * method is chainable and calls setColor after creating the gradient.\n     * @param {number} x0 The x axis of the coordinate of the start circle.\n     * @param {number} y0 The y axis of the coordinate of the start circle.\n     * @param {number} r0 The radius of the start circle.\n     * @param {number} x1 The x axis of the coordinate of the end circle.\n     * @param {number} y1 The y axis of the coordinate of the end circle.\n     * @param {number} r1 The radius of the end circle.\n     * @param {GradientStep[]} steps The steps.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\n     */",
        "meta": {
          "range": [
            34504,
            34685
          ],
          "filename": "canvas.js",
          "lineno": 851,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001574",
            "name": "CanvasConstructor#printRadialGradient",
            "type": "MethodDefinition",
            "paramnames": [
              "x0",
              "y0",
              "r0",
              "x1",
              "y1",
              "r1",
              "steps"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Creates a radial gradient given by the coordinates of the two circles represented by the parameters. This\nmethod is chainable and calls setColor after creating the gradient.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate of the start circle.",
            "name": "x0"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate of the start circle.",
            "name": "y0"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius of the start circle.",
            "name": "r0"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate of the end circle.",
            "name": "x1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate of the end circle.",
            "name": "y1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The radius of the end circle.",
            "name": "r1"
          },
          {
            "type": {
              "names": [
                "Array.<GradientStep>"
              ]
            },
            "description": "The steps.",
            "name": "steps"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient"
        ],
        "name": "printRadialGradient",
        "longname": "CanvasConstructor#printRadialGradient",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#printRadialGradient"
      },
      {
        "comment": "/**\n     * Process data with this as the context\n     * @param {Function} fn A callback function\n     * @returns {this}\n     */",
        "meta": {
          "range": [
            51631,
            51700
          ],
          "filename": "canvas.js",
          "lineno": 1262,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100002177",
            "name": "CanvasConstructor#process",
            "type": "MethodDefinition",
            "paramnames": [
              "fn"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Process data with this as the context",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "A callback function",
            "name": "fn"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "this"
              ]
            }
          }
        ],
        "name": "process",
        "longname": "CanvasConstructor#process",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#process"
      },
      {
        "comment": "/**\n     * The CanvasRenderingContext2D.putImageData() method of the Canvas 2D API paints data from the given ImageData object onto the bitmap.\n     * If a dirty rectangle is provided, only the pixels from that rectangle are painted.\n     * This method is not affected by the canvas transformation matrix.\n     * @param {ImageData} imagedata An ImageData object containing the array of pixel values.\n     * @param {number} dx Horizontal position (x-coordinate) at which to place the image data in the destination canvas.\n     * @param {number} dy Vertical position (y-coordinate) at which to place the image data in the destination canvas.\n     * @param {number} [dirtyX=0] Horizontal position (x-coordinate). The x coordinate of the top left hand corner of your Image data. Defaults to 0.\n     * @param {number} [dirtyY=0] Vertical position (y-coordinate). The y coordinate of the top left hand corner of your Image data. Defaults to 0.\n     * @param {number} [dirtyWidth] Width of the rectangle to be painted. Defaults to the width of the image data.\n     * @param {number} [dirtyHeight] Height of the rectangle to be painted. Defaults to the height of the image data.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData\n     */",
        "meta": {
          "range": [
            9210,
            9304
          ],
          "filename": "canvas.js",
          "lineno": 242,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000367",
            "name": "CanvasConstructor#putImageData",
            "type": "MethodDefinition",
            "paramnames": [
              "args"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "The CanvasRenderingContext2D.putImageData() method of the Canvas 2D API paints data from the given ImageData object onto the bitmap.\nIf a dirty rectangle is provided, only the pixels from that rectangle are painted.\nThis method is not affected by the canvas transformation matrix.",
        "params": [
          {
            "type": {
              "names": [
                "ImageData"
              ]
            },
            "description": "An ImageData object containing the array of pixel values.",
            "name": "imagedata"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Horizontal position (x-coordinate) at which to place the image data in the destination canvas.",
            "name": "dx"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Vertical position (y-coordinate) at which to place the image data in the destination canvas.",
            "name": "dy"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Horizontal position (x-coordinate). The x coordinate of the top left hand corner of your Image data. Defaults to 0.",
            "name": "dirtyX"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Vertical position (y-coordinate). The y coordinate of the top left hand corner of your Image data. Defaults to 0.",
            "name": "dirtyY"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "Width of the rectangle to be painted. Defaults to the width of the image data.",
            "name": "dirtyWidth"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "Height of the rectangle to be painted. Defaults to the height of the image data.",
            "name": "dirtyHeight"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData"
        ],
        "name": "putImageData",
        "longname": "CanvasConstructor#putImageData",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#putImageData"
      },
      {
        "comment": "/**\n     * Adds a quadratic Bézier curve to the path. It requires two points. The first point is a control point and the\n     * second one is the end point. The starting point is the last point in the current path, which can be changed using\n     * moveTo() before creating the quadratic Bézier curve.\n     * @param {number} cpx The x axis of the coordinate for the control point.\n     * @param {number} cpy The y axis of the coordinate for the control point.\n     * @param {number} x   The x axis of the coordinate for the end point.\n     * @param {number} y   The y axis of the coordinate for the end point.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo\n     */",
        "meta": {
          "range": [
            38934,
            39050
          ],
          "filename": "canvas.js",
          "lineno": 927,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001684",
            "name": "CanvasConstructor#quadraticCurveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "cpx",
              "cpy",
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds a quadratic Bézier curve to the path. It requires two points. The first point is a control point and the\nsecond one is the end point. The starting point is the last point in the current path, which can be changed using\nmoveTo() before creating the quadratic Bézier curve.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate for the control point.",
            "name": "cpx"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate for the control point.",
            "name": "cpy"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x axis of the coordinate for the end point.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y axis of the coordinate for the end point.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo"
        ],
        "name": "quadraticCurveTo",
        "longname": "CanvasConstructor#quadraticCurveTo",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#quadraticCurveTo"
      },
      {
        "comment": "/**\n     * Reset the canvas' shadows.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            46133,
            46245
          ],
          "filename": "canvas.js",
          "lineno": 1105,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001914",
            "name": "CanvasConstructor#resetShadows",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Reset the canvas' shadows.",
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "resetShadows",
        "longname": "CanvasConstructor#resetShadows",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "params": [],
        "$longname": "CanvasConstructor#resetShadows"
      },
      {
        "comment": "/**\n     * Reset the transformation.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            6047,
            6128
          ],
          "filename": "canvas.js",
          "lineno": 196,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000275",
            "name": "CanvasConstructor#resetTransformation",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Reset the transformation.",
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "resetTransformation",
        "longname": "CanvasConstructor#resetTransformation",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "params": [],
        "$longname": "CanvasConstructor#resetTransformation"
      },
      {
        "comment": "/**\n     * Restores the most recently saved canvas by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore\n     */",
        "meta": {
          "range": [
            3198,
            3268
          ],
          "filename": "canvas.js",
          "lineno": 116,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000172",
            "name": "CanvasConstructor#restore",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Restores the most recently saved canvas by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.",
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore"
        ],
        "name": "restore",
        "longname": "CanvasConstructor#restore",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "params": [],
        "$longname": "CanvasConstructor#restore"
      },
      {
        "comment": "/**\n     * Adds a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in radians.\n     * @param {number} angle The angle to rotate clockwise in radians.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate\n     */",
        "meta": {
          "range": [
            3647,
            3725
          ],
          "filename": "canvas.js",
          "lineno": 128,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000185",
            "name": "CanvasConstructor#rotate",
            "type": "MethodDefinition",
            "paramnames": [
              "angle"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in radians.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The angle to rotate clockwise in radians.",
            "name": "angle"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate"
        ],
        "name": "rotate",
        "longname": "CanvasConstructor#rotate",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#rotate"
      },
      {
        "comment": "/**\n     * Save the entire state of the canvas by pushing the current state onto a stack.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save\n     */",
        "meta": {
          "range": [
            2810,
            2874
          ],
          "filename": "canvas.js",
          "lineno": 105,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000159",
            "name": "CanvasConstructor#save",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Save the entire state of the canvas by pushing the current state onto a stack.",
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save"
        ],
        "name": "save",
        "longname": "CanvasConstructor#save",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "params": [],
        "$longname": "CanvasConstructor#save"
      },
      {
        "comment": "/**\n     * Adds a scaling transformation to the canvas units by x horizontally and by y vertically.\n     * @param {number} x Scaling factor in the horizontal direction.\n     * @param {number} y Scaling factor in the vertical direction.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale\n     */",
        "meta": {
          "range": [
            4125,
            4199
          ],
          "filename": "canvas.js",
          "lineno": 141,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000200",
            "name": "CanvasConstructor#scale",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds a scaling transformation to the canvas units by x horizontally and by y vertically.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Scaling factor in the horizontal direction.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Scaling factor in the vertical direction.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale"
        ],
        "name": "scale",
        "longname": "CanvasConstructor#scale",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#scale"
      },
      {
        "comment": "/**\n     * Set anti-aliasing mode.\n     * @param {('default'|'none'|'gray'|'subpixel')} antialias The antialias mode.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            44537,
            44636
          ],
          "filename": "canvas.js",
          "lineno": 1070,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001869",
            "name": "CanvasConstructor#setAntialiasing",
            "type": "MethodDefinition",
            "paramnames": [
              "antialias"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Set anti-aliasing mode.",
        "params": [
          {
            "type": {
              "names": [
                "'default'",
                "'none'",
                "'gray'",
                "'subpixel'"
              ]
            },
            "description": "The antialias mode.",
            "name": "antialias"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "setAntialiasing",
        "longname": "CanvasConstructor#setAntialiasing",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setAntialiasing"
      },
      {
        "comment": "/**\n     * Set a color for the canvas' context.\n     * @param {string|CanvasGradient} color A canvas' color resolvable.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle\n     */",
        "meta": {
          "range": [
            28122,
            28206
          ],
          "filename": "canvas.js",
          "lineno": 702,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001334",
            "name": "CanvasConstructor#setColor",
            "type": "MethodDefinition",
            "paramnames": [
              "color"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Set a color for the canvas' context.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "CanvasGradient"
              ]
            },
            "description": "A canvas' color resolvable.",
            "name": "color"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle"
        ],
        "name": "setColor",
        "longname": "CanvasConstructor#setColor",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setColor"
      },
      {
        "comment": "/**\n     * Modify the alpha value that is applied to shapes and images before they are drawn into the canvas.\n     * @param {number} value The alpha value, from 0.0 (fully transparent) to 1.0 (fully opaque)\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha\n     */",
        "meta": {
          "range": [
            45931,
            46023
          ],
          "filename": "canvas.js",
          "lineno": 1095,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001899",
            "name": "CanvasConstructor#setGlobalAlpha",
            "type": "MethodDefinition",
            "paramnames": [
              "value"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Modify the alpha value that is applied to shapes and images before they are drawn into the canvas.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The alpha value, from 0.0 (fully transparent) to 1.0 (fully opaque)",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha"
        ],
        "name": "setGlobalAlpha",
        "longname": "CanvasConstructor#setGlobalAlpha",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setGlobalAlpha"
      },
      {
        "comment": "/**\n     * Sets the type of compositing operation to apply when drawing new shapes, where type is a string identifying which\n     * of the compositing or blending mode operations to use.\n     * @param {('source-over'|'source-in'|'source-out'|'source-atop'|'destination-over'|'destination-in'|'destination-out'|'destination-atop'|'lighter'|'copy'|'xor'|'darken'|'lighten'|'color-dodge'|'color-burn'|'difference'|'exclusion'|'hue'|'saturation'|'color'|'luminosity'|'multiply'|'screen'|'overlay'|'hard-light'|'soft-light'|'hsl-hue'|'hsl-saturation'|'hsl-color'|'hsl-luminosity')} type The global composite operation mode.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n     */",
        "meta": {
          "range": [
            45438,
            45554
          ],
          "filename": "canvas.js",
          "lineno": 1083,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001884",
            "name": "CanvasConstructor#setGlobalCompositeOperation",
            "type": "MethodDefinition",
            "paramnames": [
              "type"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the type of compositing operation to apply when drawing new shapes, where type is a string identifying which\nof the compositing or blending mode operations to use.",
        "params": [
          {
            "type": {
              "names": [
                "'source-over'",
                "'source-in'",
                "'source-out'",
                "'source-atop'",
                "'destination-over'",
                "'destination-in'",
                "'destination-out'",
                "'destination-atop'",
                "'lighter'",
                "'copy'",
                "'xor'",
                "'darken'",
                "'lighten'",
                "'color-dodge'",
                "'color-burn'",
                "'difference'",
                "'exclusion'",
                "'hue'",
                "'saturation'",
                "'color'",
                "'luminosity'",
                "'multiply'",
                "'screen'",
                "'overlay'",
                "'hard-light'",
                "'soft-light'",
                "'hsl-hue'",
                "'hsl-saturation'",
                "'hsl-color'",
                "'hsl-luminosity'"
              ]
            },
            "description": "The global composite operation mode.",
            "name": "type"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation"
        ],
        "name": "setGlobalCompositeOperation",
        "longname": "CanvasConstructor#setGlobalCompositeOperation",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setGlobalCompositeOperation"
      },
      {
        "comment": "/**\n     * Determines how the end points of every line are drawn. There are three possible values for this property and\n     * those are: butt, round and square. By default this property is set to butt.\n     * @param {('butt'|'round'|'square')} value The line join type.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap\n     */",
        "meta": {
          "range": [
            18983,
            19067
          ],
          "filename": "canvas.js",
          "lineno": 488,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000765",
            "name": "CanvasConstructor#setLineCap",
            "type": "MethodDefinition",
            "paramnames": [
              "value"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Determines how the end points of every line are drawn. There are three possible values for this property and\nthose are: butt, round and square. By default this property is set to butt.",
        "params": [
          {
            "type": {
              "names": [
                "'butt'",
                "'round'",
                "'square'"
              ]
            },
            "description": "The line join type.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap"
        ],
        "name": "setLineCap",
        "longname": "CanvasConstructor#setLineCap",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setLineCap"
      },
      {
        "comment": "/**\n     * Sets the line dash pattern used when stroking lines, using an array of values which specify alternating lengths\n     * of lines and gaps which describe the pattern.\n     * @param {number[]} segments An Array of numbers which specify distances to alternately draw a line and a gap (in\n     * coordinate space units). If the number of elements in the array is odd, the elements of the array get copied and\n     * concatenated. For example, [5, 15, 25] will become [5, 15, 25, 5, 15, 25]. If the array is empty, the line dash\n     * list is cleared and line strokes return to being solid.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n     */",
        "meta": {
          "range": [
            19834,
            19928
          ],
          "filename": "canvas.js",
          "lineno": 504,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000780",
            "name": "CanvasConstructor#setLineDash",
            "type": "MethodDefinition",
            "paramnames": [
              "segments"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the line dash pattern used when stroking lines, using an array of values which specify alternating lengths\nof lines and gaps which describe the pattern.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An Array of numbers which specify distances to alternately draw a line and a gap (in\ncoordinate space units). If the number of elements in the array is odd, the elements of the array get copied and\nconcatenated. For example, [5, 15, 25] will become [5, 15, 25, 5, 15, 25]. If the array is empty, the line dash\nlist is cleared and line strokes return to being solid.",
            "name": "segments"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash"
        ],
        "name": "setLineDash",
        "longname": "CanvasConstructor#setLineDash",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setLineDash"
      },
      {
        "comment": "/**\n     * Sets the line dash pattern offset or \"phase\" to achieve a \"marching ants\" effect\n     * @param {number} value A float specifying the amount of the offset. Initially 0.0.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset\n     */",
        "meta": {
          "range": [
            17850,
            17948
          ],
          "filename": "canvas.js",
          "lineno": 461,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000735",
            "name": "CanvasConstructor#setLineDashOffset",
            "type": "MethodDefinition",
            "paramnames": [
              "value"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the line dash pattern offset or \"phase\" to achieve a \"marching ants\" effect",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "A float specifying the amount of the offset. Initially 0.0.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset"
        ],
        "name": "setLineDashOffset",
        "longname": "CanvasConstructor#setLineDashOffset",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setLineDashOffset"
      },
      {
        "comment": "/**\n     * Determines how two connecting segments (of lines, arcs or curves) with non-zero lengths in a shape are joined\n     * together (degenerate segments with zero lengths, whose specified endpoints and control points are exactly at the\n     * same position, are skipped).\n     * @param {('bevel'|'round'|'miter')} value The line join type.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin\n     */",
        "meta": {
          "range": [
            18460,
            18546
          ],
          "filename": "canvas.js",
          "lineno": 475,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000750",
            "name": "CanvasConstructor#setLineJoin",
            "type": "MethodDefinition",
            "paramnames": [
              "value"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Determines how two connecting segments (of lines, arcs or curves) with non-zero lengths in a shape are joined\ntogether (degenerate segments with zero lengths, whose specified endpoints and control points are exactly at the\nsame position, are skipped).",
        "params": [
          {
            "type": {
              "names": [
                "'bevel'",
                "'round'",
                "'miter'"
              ]
            },
            "description": "The line join type.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin"
        ],
        "name": "setLineJoin",
        "longname": "CanvasConstructor#setLineJoin",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setLineJoin"
      },
      {
        "comment": "/**\n     * Sets the thickness of lines in space units.\n     * @param {number} [width=1] A number specifying the line width in space units.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth\n     */",
        "meta": {
          "range": [
            17328,
            17420
          ],
          "filename": "canvas.js",
          "lineno": 445,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000707",
            "name": "CanvasConstructor#setLineWidth",
            "type": "MethodDefinition",
            "paramnames": [
              "width"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the thickness of lines in space units.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "A number specifying the line width in space units.",
            "name": "width"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth"
        ],
        "name": "setLineWidth",
        "longname": "CanvasConstructor#setLineWidth",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setLineWidth"
      },
      {
        "comment": "/**\n     * Sets the miter limit ratio in space units. When getting, it returns the current value (10.0 by default). When\n     * setting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value.\n     * @param {number} value A number specifying the miter limit ratio in space units. Zero, negative, Infinity and NaN\n     * values are ignored.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit\n     */",
        "meta": {
          "range": [
            43251,
            43341
          ],
          "filename": "canvas.js",
          "lineno": 1034,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001824",
            "name": "CanvasConstructor#setMiterLimit",
            "type": "MethodDefinition",
            "paramnames": [
              "value"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the miter limit ratio in space units. When getting, it returns the current value (10.0 by default). When\nsetting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "A number specifying the miter limit ratio in space units. Zero, negative, Infinity and NaN\nvalues are ignored.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit"
        ],
        "name": "setMiterLimit",
        "longname": "CanvasConstructor#setMiterLimit",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setMiterLimit"
      },
      {
        "comment": "/**\n     * Change the pattern quality\n     * @param {('fast'|'good'|'best'|'nearest'|'bilinear')} pattern The pattern quality.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            43540,
            43642
          ],
          "filename": "canvas.js",
          "lineno": 1045,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001839",
            "name": "CanvasConstructor#setPatternQuality",
            "type": "MethodDefinition",
            "paramnames": [
              "pattern"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the pattern quality",
        "params": [
          {
            "type": {
              "names": [
                "'fast'",
                "'good'",
                "'best'",
                "'nearest'",
                "'bilinear'"
              ]
            },
            "description": "The pattern quality.",
            "name": "pattern"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "setPatternQuality",
        "longname": "CanvasConstructor#setPatternQuality",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setPatternQuality"
      },
      {
        "comment": "/**\n     * Set the shadow's blur.\n     * @param {number} radius The shadow's blur radius to set.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur\n     */",
        "meta": {
          "range": [
            41331,
            41423
          ],
          "filename": "canvas.js",
          "lineno": 984,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001764",
            "name": "CanvasConstructor#setShadowBlur",
            "type": "MethodDefinition",
            "paramnames": [
              "radius"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Set the shadow's blur.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The shadow's blur radius to set.",
            "name": "radius"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur"
        ],
        "name": "setShadowBlur",
        "longname": "CanvasConstructor#setShadowBlur",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setShadowBlur"
      },
      {
        "comment": "/**\n     * Set the shadow's color.\n     * @param {string} color A canvas' color resolvable to set as shadow's color.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor\n     */",
        "meta": {
          "range": [
            41710,
            41802
          ],
          "filename": "canvas.js",
          "lineno": 996,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001779",
            "name": "CanvasConstructor#setShadowColor",
            "type": "MethodDefinition",
            "paramnames": [
              "color"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Set the shadow's color.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "A canvas' color resolvable to set as shadow's color.",
            "name": "color"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor"
        ],
        "name": "setShadowColor",
        "longname": "CanvasConstructor#setShadowColor",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setShadowColor"
      },
      {
        "comment": "/**\n     * Set the property that specifies the distance that the shadow will be offset in horizontal distance.\n     * @param {number} value The value in pixels for the distance.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX\n     */",
        "meta": {
          "range": [
            42152,
            42248
          ],
          "filename": "canvas.js",
          "lineno": 1008,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001794",
            "name": "CanvasConstructor#setShadowOffsetX",
            "type": "MethodDefinition",
            "paramnames": [
              "value"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Set the property that specifies the distance that the shadow will be offset in horizontal distance.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The value in pixels for the distance.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX"
        ],
        "name": "setShadowOffsetX",
        "longname": "CanvasConstructor#setShadowOffsetX",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setShadowOffsetX"
      },
      {
        "comment": "/**\n     * Set the property that specifies the distance that the shadow will be offset in vertical distance.\n     * @param {number} value The value in pixels for the distance.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY\n     */",
        "meta": {
          "range": [
            42596,
            42692
          ],
          "filename": "canvas.js",
          "lineno": 1020,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001809",
            "name": "CanvasConstructor#setShadowOffsetY",
            "type": "MethodDefinition",
            "paramnames": [
              "value"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Set the property that specifies the distance that the shadow will be offset in vertical distance.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The value in pixels for the distance.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY"
        ],
        "name": "setShadowOffsetY",
        "longname": "CanvasConstructor#setShadowOffsetY",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setShadowOffsetY"
      },
      {
        "comment": "/**\n     * Specifies the color or style to use for the lines around shapes. The default is #000000 (black).\n     * @param {string} [color='#000000'] A canvas' color resolvable.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle\n     */",
        "meta": {
          "range": [
            16922,
            17021
          ],
          "filename": "canvas.js",
          "lineno": 433,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000690",
            "name": "CanvasConstructor#setStroke",
            "type": "MethodDefinition",
            "paramnames": [
              "color"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Specifies the color or style to use for the lines around shapes. The default is #000000 (black).",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'#000000'",
            "description": "A canvas' color resolvable.",
            "name": "color"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle"
        ],
        "name": "setStroke",
        "longname": "CanvasConstructor#setStroke",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setStroke"
      },
      {
        "comment": "/**\n     * Change the font alignment.\n     * @param {('left'|'center'|'right'|'start'|'end')} align The font's alignment to set.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign\n     */",
        "meta": {
          "range": [
            28826,
            28914
          ],
          "filename": "canvas.js",
          "lineno": 726,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001364",
            "name": "CanvasConstructor#setTextAlign",
            "type": "MethodDefinition",
            "paramnames": [
              "align"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the font alignment.",
        "params": [
          {
            "type": {
              "names": [
                "'left'",
                "'center'",
                "'right'",
                "'start'",
                "'end'"
              ]
            },
            "description": "The font's alignment to set.",
            "name": "align"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign"
        ],
        "name": "setTextAlign",
        "longname": "CanvasConstructor#setTextAlign",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setTextAlign"
      },
      {
        "comment": "/**\n     * Change the font's baseline.\n     * @param {('top'|'hanging'|'middle'|'alphabetic'|'ideographic'|'bottom')} baseline The font's baseline to set.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline\n     */",
        "meta": {
          "range": [
            29240,
            29340
          ],
          "filename": "canvas.js",
          "lineno": 738,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001379",
            "name": "CanvasConstructor#setTextBaseline",
            "type": "MethodDefinition",
            "paramnames": [
              "baseline"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the font's baseline.",
        "params": [
          {
            "type": {
              "names": [
                "'top'",
                "'hanging'",
                "'middle'",
                "'alphabetic'",
                "'ideographic'",
                "'bottom'"
              ]
            },
            "description": "The font's baseline to set.",
            "name": "baseline"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline"
        ],
        "name": "setTextBaseline",
        "longname": "CanvasConstructor#setTextBaseline",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setTextBaseline"
      },
      {
        "comment": "/**\n     * Set the text drawing mode. Using glyph is much faster than path for drawing, and when using a PDF context will\n     * embed the text natively, so will be selectable and lower filesize. The downside is that cairo does not have any\n     * subpixel precision for glyph, so this will be noticeably lower quality for text positioning in cases such as\n     * rotated text. Also, strokeText in glyph will act the same as fillText, except using the stroke style for the fill.\n     * @param {('path'|'glyph')} mode The drawing mode.\n     * @returns {CanvasConstructor}\n     * @chainable\n     */",
        "meta": {
          "range": [
            44249,
            44347
          ],
          "filename": "canvas.js",
          "lineno": 1059,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001854",
            "name": "CanvasConstructor#setTextDrawingMode",
            "type": "MethodDefinition",
            "paramnames": [
              "mode"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Set the text drawing mode. Using glyph is much faster than path for drawing, and when using a PDF context will\nembed the text natively, so will be selectable and lower filesize. The downside is that cairo does not have any\nsubpixel precision for glyph, so this will be noticeably lower quality for text positioning in cases such as\nrotated text. Also, strokeText in glyph will act the same as fillText, except using the stroke style for the fill.",
        "params": [
          {
            "type": {
              "names": [
                "'path'",
                "'glyph'"
              ]
            },
            "description": "The drawing mode.",
            "name": "mode"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "name": "setTextDrawingMode",
        "longname": "CanvasConstructor#setTextDrawingMode",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setTextDrawingMode"
      },
      {
        "comment": "/**\n     * Change the font.\n     * @param {string} font The font's name to set.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font\n     */",
        "meta": {
          "range": [
            28449,
            28529
          ],
          "filename": "canvas.js",
          "lineno": 714,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100001349",
            "name": "CanvasConstructor#setTextFont",
            "type": "MethodDefinition",
            "paramnames": [
              "font"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the font.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The font's name to set.",
            "name": "font"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font"
        ],
        "name": "setTextFont",
        "longname": "CanvasConstructor#setTextFont",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setTextFont"
      },
      {
        "comment": "/**\n     * Resets (overrides) the current transformation to the identity matrix and then invokes a transformation described\n     * by the arguments of this method.\n     * @param {number} a Horizontal scaling.\n     * @param {number} b Horizontal skewing.\n     * @param {number} c Vertical skewing.\n     * @param {number} d Vertical scaling.\n     * @param {number} e Horizontal moving.\n     * @param {number} f Vertical moving.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform\n     */",
        "meta": {
          "range": [
            5826,
            5938
          ],
          "filename": "canvas.js",
          "lineno": 186,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000250",
            "name": "CanvasConstructor#setTransform",
            "type": "MethodDefinition",
            "paramnames": [
              "a",
              "b",
              "c",
              "d",
              "e",
              "f"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Resets (overrides) the current transformation to the identity matrix and then invokes a transformation described\nby the arguments of this method.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Horizontal scaling.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Horizontal skewing.",
            "name": "b"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Vertical skewing.",
            "name": "c"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Vertical scaling.",
            "name": "d"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Horizontal moving.",
            "name": "e"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Vertical moving.",
            "name": "f"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform"
        ],
        "name": "setTransform",
        "longname": "CanvasConstructor#setTransform",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#setTransform"
      },
      {
        "comment": "/**\n     * Strokes the current or given path with the current stroke style using the non-zero winding rule.\n     * @param {any} path A Path2D path to stroke.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke\n     */",
        "meta": {
          "range": [
            13069,
            13145
          ],
          "filename": "canvas.js",
          "lineno": 342,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000592",
            "name": "CanvasConstructor#stroke",
            "type": "MethodDefinition",
            "paramnames": [
              "path"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Strokes the current or given path with the current stroke style using the non-zero winding rule.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "A Path2D path to stroke.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke"
        ],
        "name": "stroke",
        "longname": "CanvasConstructor#stroke",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#stroke"
      },
      {
        "comment": "/**\n     * Render the canvas into a buffer.\n     * @param {Object} options The render's options.\n     * @returns {Buffer}\n     */",
        "meta": {
          "range": [
            49875,
            49946
          ],
          "filename": "canvas.js",
          "lineno": 1199,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100002055",
            "name": "CanvasConstructor#toBuffer",
            "type": "MethodDefinition",
            "paramnames": [
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Render the canvas into a buffer.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The render's options.",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Buffer"
              ]
            }
          }
        ],
        "name": "toBuffer",
        "longname": "CanvasConstructor#toBuffer",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#toBuffer"
      },
      {
        "comment": "/**\n     * Render the canvas into a buffer using a Promise.\n     * @returns {Promise<Buffer>}\n     */",
        "meta": {
          "range": [
            50058,
            50244
          ],
          "filename": "canvas.js",
          "lineno": 1207,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100002068",
            "name": "CanvasConstructor#toBufferAsync",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Render the canvas into a buffer using a Promise.",
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Buffer>"
              ]
            }
          }
        ],
        "name": "toBufferAsync",
        "longname": "CanvasConstructor#toBufferAsync",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "params": [],
        "$longname": "CanvasConstructor#toBufferAsync"
      },
      {
        "comment": "/**\n     * Adds a translation transformation by moving the canvas and its origin x horizontally and y vertically on the grid.\n     * @param {number} x Distance to move in the horizontal direction.\n     * @param {number} y Distance to move in the vertical direction.\n     * @returns {CanvasConstructor}\n     * @chainable\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate\n     */",
        "meta": {
          "range": [
            4633,
            4715
          ],
          "filename": "canvas.js",
          "lineno": 154,
          "columnno": 4,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000217",
            "name": "CanvasConstructor#translate",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds a translation transformation by moving the canvas and its origin x horizontally and y vertically on the grid.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Distance to move in the horizontal direction.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Distance to move in the vertical direction.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "CanvasConstructor"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "chainable",
            "title": "chainable",
            "text": ""
          }
        ],
        "see": [
          "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate"
        ],
        "name": "translate",
        "longname": "CanvasConstructor#translate",
        "kind": "function",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#translate"
      },
      {
        "comment": "/**\n         * The image width of this canvas\n         * @since 0.0.1\n         * @type {number}\n         */",
        "meta": {
          "range": [
            1289,
            1307
          ],
          "filename": "canvas.js",
          "lineno": 48,
          "columnno": 8,
          "path": "/home/travis/build/kyranet/canvasConstructor/src",
          "code": {
            "id": "astnode100000070",
            "name": "this.width",
            "type": "Identifier",
            "value": "width",
            "paramnames": []
          }
        },
        "description": "The image width of this canvas",
        "since": "0.0.1",
        "type": {
          "names": [
            "number"
          ]
        },
        "name": "width",
        "longname": "CanvasConstructor#width",
        "kind": "member",
        "memberof": "CanvasConstructor",
        "scope": "instance",
        "$longname": "CanvasConstructor#width"
      }
    ]
  },
  {
    "comment": "/**\n * Convolute a image. This filter needs a fix.\n * @param {Canvas} canvas The Canvas instance\n * @param {number[]} weights The weights\n * @returns {Canvas}\n * @see https://www.html5rocks.com/en/tutorials/canvas/imagefilters/\n */",
    "meta": {
      "range": [
        4741,
        6094
      ],
      "filename": "filters.js",
      "lineno": 157,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002799",
        "name": "exports.convolute",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "canvas",
          "weights"
        ]
      },
      "vars": {
        "side": "convolute~side",
        "halfSide": "convolute~halfSide",
        "imageData": "convolute~imageData",
        "undefined": null,
        "y": "convolute~y",
        "x": "convolute~x",
        "dstOff": "convolute~dstOff",
        "r": "convolute~r",
        "g": "convolute~g",
        "b": "convolute~b",
        "cy": "convolute~cy",
        "cx": "convolute~cx",
        "scy": "convolute~scy",
        "scx": "convolute~scx",
        "srcOff": "convolute~srcOff",
        "wt": "convolute~wt",
        "data[undefined]": null
      }
    },
    "description": "Convolute a image. This filter needs a fix.",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      },
      {
        "type": {
          "names": [
            "Array.<number>"
          ]
        },
        "description": "The weights",
        "name": "weights"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "see": [
      "https://www.html5rocks.com/en/tutorials/canvas/imagefilters/"
    ],
    "name": "convolute",
    "longname": "convolute",
    "kind": "function",
    "scope": "global",
    "$longname": "convolute"
  },
  {
    "comment": "/**\n * Darken an image\n * @param {Canvas} canvas The Canvas instance\n * @param {number} darkness The darkness to apply in a range of 0 to 100\n * @returns {Canvas}\n */",
    "meta": {
      "range": [
        3718,
        3921
      ],
      "filename": "filters.js",
      "lineno": 124,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002714",
        "name": "exports.darkness",
        "type": "AssignmentExpression",
        "value": "exports.myOldFriend",
        "paramnames": []
      }
    },
    "description": "Darken an image",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The darkness to apply in a range of 0 to 100",
        "name": "darkness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "name": "darkness",
    "longname": "darkness",
    "kind": "member",
    "scope": "global",
    "$longname": "darkness"
  },
  {
    "comment": "/**\n * Greyscale an image\n * @param {Canvas} canvas The Canvas instance\n * @returns {Canvas}\n */",
    "meta": {
      "range": [
        374,
        581
      ],
      "filename": "filters.js",
      "lineno": 18,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002233",
        "name": "exports.greyscale",
        "type": "AssignmentExpression",
        "value": "exports.grayscale",
        "paramnames": []
      }
    },
    "description": "Greyscale an image",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "name": "greyscale",
    "longname": "greyscale",
    "kind": "member",
    "scope": "global",
    "$longname": "greyscale"
  },
  {
    "comment": "/**\n * Invert an image\n * @param {Canvas} canvas The Canvas instance\n * @returns {Canvas}\n */",
    "meta": {
      "range": [
        94,
        274
      ],
      "filename": "filters.js",
      "lineno": 6,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002200",
        "name": "exports.invert",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "canvas"
        ]
      }
    },
    "description": "Invert an image",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "name": "invert",
    "longname": "invert",
    "kind": "function",
    "scope": "global",
    "$longname": "invert"
  },
  {
    "comment": "/**\n * Apply an inverted threshold to the image\n * @param {Canvas} canvas The Canvas instance\n * @param {number} threshold The threshold to apply in a range of 0 to 255\n * @returns {Canvas}\n */",
    "meta": {
      "range": [
        2813,
        3185
      ],
      "filename": "filters.js",
      "lineno": 96,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002591",
        "name": "exports.invertedThreshold",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "canvas",
          "threshold"
        ]
      },
      "vars": {
        "imageData": "invertedThreshold~imageData",
        "undefined": null,
        "i": "invertedThreshold~i",
        "data[undefined]": "data[undefined].data[undefined]"
      }
    },
    "description": "Apply an inverted threshold to the image",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The threshold to apply in a range of 0 to 255",
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "name": "invertedThreshold",
    "longname": "invertedThreshold",
    "kind": "function",
    "scope": "global",
    "$longname": "invertedThreshold"
  },
  {
    "comment": "/**\n * Invert then greyscale an image\n * @param {Canvas} canvas The Canvas instance\n * @returns {Canvas}\n */",
    "meta": {
      "range": [
        693,
        1030
      ],
      "filename": "filters.js",
      "lineno": 31,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002270",
        "name": "exports.invertGreyscale",
        "type": "AssignmentExpression",
        "value": "exports.invertGrayscale",
        "paramnames": []
      }
    },
    "description": "Invert then greyscale an image",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "name": "invertGreyscale",
    "longname": "invertGreyscale",
    "kind": "member",
    "scope": "global",
    "$longname": "invertGreyscale"
  },
  {
    "comment": "/**\n * This variable helps Canvas-Constructor to identify if the version\n * of canvas is older than 2.0.0 (new Canvas()) or newer (Canvas.createCanvas).\n */",
    "meta": {
      "range": [
        271,
        331
      ],
      "filename": "canvas.js",
      "lineno": 12,
      "columnno": 6,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100000021",
        "name": "isNotConstructor",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "description": "This variable helps Canvas-Constructor to identify if the version\nof canvas is older than 2.0.0 (new Canvas()) or newer (Canvas.createCanvas).",
    "name": "isNotConstructor",
    "longname": "isNotConstructor",
    "kind": "constant",
    "scope": "global",
    "params": [],
    "$longname": "isNotConstructor"
  },
  {
    "kind": "package",
    "name": "canvas-constructor",
    "longname": "package:canvas-constructor",
    "author": "kyranet",
    "bugs": {
      "url": "https://github.com/kyranet/canvasConstructor/issues"
    },
    "description": "A ES6 class for node-canvas with built-in functions and chained methods.",
    "devDependencies": {
      "docma": "^1.5.3",
      "eslint": "^4.19.1",
      "fs-nextra": "^0.3.2",
      "tslint": "^5.9.1",
      "typescript": "^2.8.1"
    },
    "files": [
      "/home/travis/build/kyranet/canvasConstructor/src/canvas.js",
      "/home/travis/build/kyranet/canvasConstructor/src/filters.js"
    ],
    "homepage": "https://github.com/kyranet/canvasConstructor#readme",
    "keywords": [
      "node-canvas",
      "es6",
      "constructor"
    ],
    "licenses": [
      {
        "type": "MIT"
      }
    ],
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/kyranet/canvasConstructor.git"
    },
    "version": "1.0.1",
    "$longname": "package:canvas-constructor"
  },
  {
    "comment": "/**\n * Give an image a sepia tone\n * @param {Canvas} canvas The Canvas instance\n * @returns {Canvas}\n */",
    "meta": {
      "range": [
        1138,
        1688
      ],
      "filename": "filters.js",
      "lineno": 47,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002326",
        "name": "exports.sepia",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "canvas"
        ]
      },
      "vars": {
        "imageData": "sepia~imageData",
        "undefined": null,
        "i": "sepia~i",
        "r": "sepia~r",
        "g": "sepia~g",
        "b": "sepia~b",
        "data[undefined]": null
      }
    },
    "description": "Give an image a sepia tone",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "name": "sepia",
    "longname": "sepia",
    "kind": "function",
    "scope": "global",
    "$longname": "sepia"
  },
  {
    "comment": "/**\n * Sharpen an image\n * @param {Canvas} canvas The Canvas instance\n * @param {number[]} amounts The edge and the center\n * @returns {Canvas}\n */",
    "meta": {
      "range": [
        4153,
        4270
      ],
      "filename": "filters.js",
      "lineno": 140,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002754",
        "name": "exports.sharpen",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "canvas",
          ""
        ]
      }
    },
    "description": "Sharpen an image",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      },
      {
        "type": {
          "names": [
            "Array.<number>"
          ]
        },
        "description": "The edge and the center",
        "name": "amounts"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "name": "sharpen",
    "longname": "sharpen",
    "kind": "function",
    "scope": "global",
    "$longname": "sharpen"
  },
  {
    "comment": "/**\n * Turn an image into a silhouette\n * @param {Canvas} canvas The Canvas instance\n * @returns {Canvas}\n */",
    "meta": {
      "range": [
        1801,
        2065
      ],
      "filename": "filters.js",
      "lineno": 66,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002443",
        "name": "exports.silhouette",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "canvas"
        ]
      },
      "vars": {
        "imageData": "silhouette~imageData",
        "undefined": null,
        "i": "silhouette~i",
        "data[undefined]": "data[undefined].data[undefined]"
      }
    },
    "description": "Turn an image into a silhouette",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "name": "silhouette",
    "longname": "silhouette",
    "kind": "function",
    "scope": "global",
    "$longname": "silhouette"
  },
  {
    "comment": "/**\n * Apply a threshold to the image\n * @param {Canvas} canvas The Canvas instance\n * @param {number} threshold The threshold to apply in a range of 0 to 255\n * @returns {Canvas}\n */",
    "meta": {
      "range": [
        2252,
        2616
      ],
      "filename": "filters.js",
      "lineno": 81,
      "columnno": 0,
      "path": "/home/travis/build/kyranet/canvasConstructor/src",
      "code": {
        "id": "astnode100002504",
        "name": "exports.threshold",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "canvas",
          "threshold"
        ]
      },
      "vars": {
        "imageData": "threshold~imageData",
        "undefined": null,
        "i": "threshold~i",
        "data[undefined]": "data[undefined].data[undefined]"
      }
    },
    "description": "Apply a threshold to the image",
    "params": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        },
        "description": "The Canvas instance",
        "name": "canvas"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The threshold to apply in a range of 0 to 255",
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Canvas"
          ]
        }
      }
    ],
    "name": "threshold",
    "longname": "threshold",
    "kind": "function",
    "scope": "global",
    "$longname": "threshold"
  }
]